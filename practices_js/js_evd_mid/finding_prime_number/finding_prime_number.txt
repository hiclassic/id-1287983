১. for (let num = 2; num <= 100; num++) {
for
এটি একটি লুপ স্টেটমেন্ট। এটি নির্দিষ্ট শর্ত পর্যন্ত একটি কোড ব্লক বারবার চালাতে ব্যবহৃত হয়।

let num = 2
এখানে num নামের একটি ভেরিয়েবল ডিক্লেয়ার করা হয়েছে let দিয়ে।

এর প্রাথমিক মান 2, কারণ ১ প্রাইম নয়। ২ হলো সবচেয়ে ছোট প্রাইম নাম্বার।

num <= 100
এটি লুপ চালানোর শর্ত। যতক্ষণ num ১০০-এর কম বা সমান থাকবে, লুপ চলবে।

num++
num = num + 1 এর সংক্ষিপ্ত রূপ।

প্রতিবার লুপের শেষে num এর মান ১ করে বাড়ে।

২. let isPrime = true;
let
আবার একটি ভেরিয়েবল ডিক্লেয়ার করা হয়েছে।

isPrime
একটি বুলিয়ান টাইপ ভেরিয়েবল, যার মান true বা false হয়।

ধরে নেওয়া হয়েছে num সংখ্যা প্রাইম — পরে যাচাই করা হবে।

৩. for (let i = 2; i <= Math.sqrt(num); i++) {
for
আরেকটি লুপ, এবার num নাম্বারটি প্রাইম কিনা তা চেক করতে।

let i = 2
i ভেরিয়েবল শুরু হয়েছে ২ থেকে, কারণ ১ দিয়ে ভাগ করলেও সব নাম্বারই ভাগ হয় — সেটা কোনো মানে দেয় না।

i <= Math.sqrt(num)
i যতক্ষণ num-এর বর্গমূল পর্যন্ত থাকবে, লুপ চলবে।

কারণ যদি num এর কোনো ছোট ভাজক থাকে, সেটা বর্গমূলের মধ্যেই পাওয়া যাবে।

Math.sqrt(num)
JavaScript-এর Math অবজেক্ট থেকে sqrt() মেথড, যা num এর square root রিটার্ন করে।

i++
i প্রতি ধাপে ১ করে বাড়বে।

৪. if (num % i === 0) {
if
শর্ত যাচাই করার জন্য ব্যবহৃত হয়।

num % i
% অপারেটর দিয়ে ভাগশেষ (remainder) বের করা হয়।

উদাহরণ: 10 % 3 = 1, কারণ ৩ দিয়ে ১০ ভাগ করলে ভাগশেষ থাকে ১।

=== 0
যদি ভাগশেষ ০ হয়, অর্থাৎ i দিয়ে num নিখুঁতভাবে ভাগ হয় — তখন এটি প্রাইম নয়।

৫. isPrime = false;
যদি num কোনো সংখ্যা দিয়ে নিখুঁতভাবে ভাগ হয়, তাহলে এটা প্রাইম না।

তাই isPrime-কে false সেট করা হয়।

৬. break;
লুপ থামিয়ে দেয় কারণ প্রমাণ হয়ে গেছে সংখ্যাটি প্রাইম নয়।

৭. if (isPrime) {
বাইরের for লুপের শেষে দেখা হয়, যদি isPrime এখনো true হয়, তাহলে সংখ্যাটি প্রাইম।

৮. console.log(num);
console.log() হল একটি ফাংশন, যা কনসোলে কোনো তথ্য প্রিন্ট করে।

এখানে num মানটি প্রিন্ট করা হচ্ছে, অর্থাৎ প্রাইম নাম্বার।

৯. }
প্রতিটি {} ব্লকের শেষে বন্ধনীর মাধ্যমে কোড ব্লকের সমাপ্তি বোঝানো হয়।

সামগ্রিকভাবে কোড কী করছে?
২ থেকে ১০০ পর্যন্ত প্রতিটি সংখ্যা নেয়।

প্রতিটি সংখ্যার জন্য, চেক করে সেটি কোনো ছোট সংখ্যার দ্বারা ভাগ হয় কি না।

যদি না হয়, সেটি প্রাইম হিসেবে ধরে এবং প্রিন্ট করে।

চূড়ান্ত আউটপুট:

ব্যাখ্যা:
primes = []: সব প্রাইম নাম্বার এখানে জমা হবে।

primes.push(num): প্রাইম নাম্বারগুলো অ্যারেতে যোগ হয়।

primes.join(', '): অ্যারেতে থাকা সংখ্যাগুলোকে একটি স্ট্রিং-এ রূপান্তর করে, যেখানে প্রতিটি উপাদানের মাঝে , যোগ করা হয়।

alert(...): সেই স্ট্রিংকে pop-up এর মাধ্যমে দেখায়।

আউটপুট (একটি এলার্ট বক্সে দেখা যাবে):
Copy code
2, 3, 5, 7, 11, 13, 17, ..., 97


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

আমরা Math.sqrt(num) এবং i <= Math.sqrt(num) এই শর্ত কেন ব্যবহার করি, সেটা বাস্তব উদাহরণের মাধ্যমে বিস্তারিতভাবে ব্যাখ্যা করছি।

উদাহরণ: ধরুন num = 36
আমরা যাচাই করতে চাই, ৩৬ একটি প্রাইম সংখ্যা কিনা।

১. পূর্ণভাবে চেক করলে আমাদের কী করতে হতো:
আমরা i = 2 থেকে শুরু করে i = 35 পর্যন্ত চেক করতাম:

36 % 2 === 0 → ভাগ হয়

36 % 3 === 0 → ভাগ হয়

...

অনেক সংখ্যার ওপর চেক করতে হতো

অপ্রয়োজনীয় কাজ অনেক বেশি।

২. বুদ্ধিমত্তার সাথে চেক (i ≤ sqrt(num))
Math.sqrt(36) = 6

অর্থাৎ আমরা কেবল i = 2 থেকে i = 6 পর্যন্ত চেক করলেই যথেষ্ট।

কারণ কী?

যদি num (এখানে 36) এর কোনো ভাজক থাকে, তাহলে সেটা অবশ্যই:

হয় √36 = 6 এর কম হবে

না হয় ৬ এর সমান বা তার বিপরীত ভাজক (যেমন 2 × 18, 3 × 12, 6 × 6)

ভাগজোড়া সবসময় আসে:
যেমন:

2 × 18

3 × 12

4 × 9

6 × 6

তারপর আসবে:

9 × 4

12 × 3

18 × 2
(এগুলো আগেই দেখা হয়ে গেছে)

তাই ৬ এর পরে আর নতুন কিছু পাওয়া যাবে না।

কোড দিয়ে যদি দেখি:
javascript
Copy code
let num = 36;
for (let i = 2; i <= Math.sqrt(num); i++) {
    if (num % i === 0) {
        console.log(`${num} is divisible by ${i}`);
    }
}
আউটপুট হবে:

csharp
Copy code
36 is divisible by 2
36 is divisible by 3
36 is divisible by 4
36 is divisible by 6
এর মানে, i = 7 বা তার পরে আর চেক করার দরকার নেই।

উপসংহার:
i <= Math.sqrt(num) ব্যবহার করলে আমরা অর্ধেক পরিমাণ সংখ্যা চেক করেই বুঝে যেতে পারি কোনো সংখ্যা প্রাইম কি না।

এতে পারফরম্যান্স অনেক ভালো হয়, বিশেষ করে যখন বড় সংখ্যার সাথে কাজ করি (যেমন 10,000 বা 1,000,000 পর্যন্ত প্রাইম বের করতে চাইলে)।


আমরা Math.sqrt(num) এবং i <= Math.sqrt(num) এই শর্ত কেন ব্যবহার করি, সেটা বাস্তব উদাহরণের মাধ্যমে বিস্তারিতভাবে ব্যাখ্যা করছি।

উদাহরণ: ধরুন num = 36
আমরা যাচাই করতে চাই, ৩৬ একটি প্রাইম সংখ্যা কিনা।

১. পূর্ণভাবে চেক করলে আমাদের কী করতে হতো:
আমরা i = 2 থেকে শুরু করে i = 35 পর্যন্ত চেক করতাম:

36 % 2 === 0 → ভাগ হয়

36 % 3 === 0 → ভাগ হয়

...

অনেক সংখ্যার ওপর চেক করতে হতো

অপ্রয়োজনীয় কাজ অনেক বেশি।

২. বুদ্ধিমত্তার সাথে চেক (i ≤ sqrt(num))
Math.sqrt(36) = 6

অর্থাৎ আমরা কেবল i = 2 থেকে i = 6 পর্যন্ত চেক করলেই যথেষ্ট।

কারণ কী?

যদি num (এখানে 36) এর কোনো ভাজক থাকে, তাহলে সেটা অবশ্যই:

হয় √36 = 6 এর কম হবে

না হয় ৬ এর সমান বা তার বিপরীত ভাজক (যেমন 2 × 18, 3 × 12, 6 × 6)

ভাগজোড়া সবসময় আসে:
যেমন:

2 × 18

3 × 12

4 × 9

6 × 6

তারপর আসবে:

9 × 4

12 × 3

18 × 2
(এগুলো আগেই দেখা হয়ে গেছে)

তাই ৬ এর পরে আর নতুন কিছু পাওয়া যাবে না।

কোড দিয়ে যদি দেখি:
javascript
Copy code
let num = 36;
for (let i = 2; i <= Math.sqrt(num); i++) {
    if (num % i === 0) {
        console.log(`${num} is divisible by ${i}`);
    }
}
আউটপুট হবে:

csharp
Copy code
36 is divisible by 2
36 is divisible by 3
36 is divisible by 4
36 is divisible by 6
এর মানে, i = 7 বা তার পরে আর চেক করার দরকার নেই।

উপসংহার:
i <= Math.sqrt(num) ব্যবহার করলে আমরা অর্ধেক পরিমাণ সংখ্যা চেক করেই বুঝে যেতে পারি কোনো সংখ্যা প্রাইম কি না।

এতে পারফরম্যান্স অনেক ভালো হয়, বিশেষ করে যখন বড় সংখ্যার সাথে কাজ করি (যেমন 10,000 বা 1,000,000 পর্যন্ত প্রাইম বের করতে চাইলে)।
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

১. function getPrimesUpTo(limit) {
function: JavaScript-এ একটি ফাংশন তৈরি করার জন্য ব্যবহৃত কীওয়ার্ড।

getPrimesUpTo: এটি ফাংশনের নাম। অর্থ: "এই সংখ্যা পর্যন্ত যতগুলো প্রাইম সংখ্যা আছে, সেগুলো নিয়ে আসো"।

(limit): এটি হলো ফাংশনের ইনপুট প্যারামিটার। ইউজার এখানে একটি সর্বোচ্চ সংখ্যা (যেমন 100) পাঠাবে।

২. const primes = [];
const: একটি কনস্ট্যান্ট ভেরিয়েবল ঘোষণা করে, যার মান রি-অ্যাসাইন করা যাবে না।

primes: ভেরিয়েবলের নাম। এখানে সব প্রাইম নাম্বার জমা হবে।

=[];: খালি অ্যারে হিসেবে শুরু করা হলো, যাতে আমরা পরে প্রাইম নাম্বারগুলো push() করে রাখি।

৩. for (let num = 2; num <= limit; num++) {
for: লুপ শুরু করার জন্য ব্যবহৃত কীওয়ার্ড।

let num = 2: লুপ কন্ট্রোল ভেরিয়েবল num কে ২ থেকে শুরু করা হচ্ছে (কারণ ১ প্রাইম নয়)।

num <= limit: যতক্ষণ পর্যন্ত num প্যারামিটারে দেওয়া limit-এর কম বা সমান থাকে, লুপ চলবে।

num++: প্রতি ধাপে num এর মান ১ বাড়বে।

৪. let isPrime = true;
প্রতিটি num সংখ্যা ধরে নিই এটা প্রাইম — পরে যাচাই করব এটা সত্যি কি না।

isPrime: একটি ফ্ল্যাগ ভেরিয়েবল, যেটা জানাবে যে সংখ্যা টি প্রাইম কিনা।

৫. for (let i = 2; i <= Math.sqrt(num); i++) {
আবার একটি লুপ, এবার চেক করার জন্য num সংখ্যাটি প্রাইম কিনা।

i = 2: চেক শুরু হবে ২ দিয়ে।

i <= Math.sqrt(num): num এর বর্গমূল পর্যন্ত চেক করা হবে, কারণ এর বেশি চেক করার দরকার নেই।

Math.sqrt(num): JavaScript এর Math লাইব্রেরি থেকে sqrt() ফাংশন, যা বর্গমূল দেয়।

৬. if (num % i === 0) {
%: মডুলাস অপারেটর। num কে i দিয়ে ভাগ করলে যদি ভাগশেষ ০ হয়, তাহলে i num এর একটি ভাজক।

===: কঠোর সমতা চেক করে (ডাটা টাইপ সহ)।

এই শর্ত যদি সত্য হয়, তাহলে num প্রাইম নয়।

৭. isPrime = false; এবং break;
যদি num কোন ভাজক পাওয়া যায়, তাহলে isPrime কে false করে দাও।

break: ইনার লুপ থামিয়ে দেয়, কারণ আর চেক করার দরকার নেই।

৮. if (isPrime) { primes.push(num); }
লুপ শেষ হওয়ার পর যদি isPrime এখনো true থাকে, তাহলে সংখ্যাটি প্রাইম।

primes.push(num);: সংখ্যাটিকে primes অ্যারেতে যোগ করে।

৯. return primes;
পুরো লুপ শেষ হলে primes অ্যারেটি রিটার্ন করা হবে, যাতে সব প্রাইম নাম্বার থাকবে।

১০. const primesUpTo100 = getPrimesUpTo(100);
getPrimesUpTo(100): এই ফাংশন কলের মাধ্যমে ১ থেকে ১০০ পর্যন্ত প্রাইম সংখ্যা বের করা হলো।

primesUpTo100: এখানে সেই রিটার্ন করা অ্যারে রাখা হচ্ছে।

১১. console.log(primesUpTo100);
এটি পুরো প্রাইম নাম্বার লিস্টটিকে কনসোলে প্রিন্ট করবে।

